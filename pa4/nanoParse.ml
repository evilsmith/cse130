type token =
  | Num of (int)
  | EOF
  | True
  | False
  | Id of (string)
  | LET
  | REC
  | EQ
  | IN
  | FUN
  | ARROW
  | IF
  | THEN
  | ELSE
  | PLUS
  | MINUS
  | MUL
  | DIV
  | LT
  | LE
  | NE
  | AND
  | OR
  | LPAREN
  | RPAREN
  | LBRAC
  | RBRAC
  | SEMI
  | COLONCOLON

open Parsing;;
let _ = parse_error;;
# 2 "nanoParse.mly"
(* See this for a tutorial on ocamlyacc 
 * http://plus.kaist.ac.kr/~shoh/ocaml/ocamllex-ocamlyacc/ocamlyacc-tutorial/ *)
open Nano 
# 39 "nanoParse.ml"
let yytransl_const = [|
    0 (* EOF *);
  258 (* True *);
  259 (* False *);
  261 (* LET *);
  262 (* REC *);
  263 (* EQ *);
  264 (* IN *);
  265 (* FUN *);
  266 (* ARROW *);
  267 (* IF *);
  268 (* THEN *);
  269 (* ELSE *);
  270 (* PLUS *);
  271 (* MINUS *);
  272 (* MUL *);
  273 (* DIV *);
  274 (* LT *);
  275 (* LE *);
  276 (* NE *);
  277 (* AND *);
  278 (* OR *);
  279 (* LPAREN *);
  280 (* RPAREN *);
  281 (* LBRAC *);
  282 (* RBRAC *);
  283 (* SEMI *);
  284 (* COLONCOLON *);
    0|]

let yytransl_block = [|
  257 (* Num *);
  260 (* Id *);
    0|]

let yylhs = "\255\255\
\001\000\001\000\001\000\001\000\001\000\002\000\002\000\003\000\
\003\000\004\000\004\000\004\000\004\000\004\000\005\000\005\000\
\005\000\005\000\005\000\006\000\006\000\006\000\007\000\007\000\
\007\000\008\000\008\000\009\000\009\000\009\000\009\000\009\000\
\009\000\000\000"

let yylen = "\002\000\
\006\000\007\000\004\000\006\000\001\000\003\000\001\000\003\000\
\001\000\003\000\003\000\003\000\003\000\001\000\003\000\003\000\
\002\000\002\000\001\000\003\000\003\000\001\000\003\000\003\000\
\001\000\002\000\001\000\001\000\001\000\001\000\001\000\003\000\
\002\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\028\000\030\000\031\000\029\000\000\000\000\000\
\000\000\000\000\000\000\034\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\027\000\000\000\000\000\000\000\000\000\
\000\000\033\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\017\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\026\000\000\000\000\000\000\000\000\000\032\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\003\000\000\000\000\000\
\000\000\000\000\001\000\000\000\004\000\002\000"

let yydgoto = "\002\000\
\012\000\013\000\014\000\015\000\016\000\017\000\018\000\019\000\
\020\000"

let yysindex = "\028\000\
\047\255\000\000\000\000\000\000\000\000\000\000\029\255\033\255\
\047\255\047\255\005\255\000\000\018\255\025\255\254\254\021\255\
\054\255\008\255\009\255\000\000\046\255\051\255\050\255\059\255\
\042\255\000\000\021\255\061\255\061\255\061\255\061\255\061\255\
\061\255\000\000\009\255\009\255\061\255\061\255\009\255\009\255\
\048\255\000\000\047\255\066\255\047\255\047\255\000\000\025\255\
\254\254\021\255\021\255\021\255\021\255\008\255\008\255\021\255\
\021\255\009\255\009\255\067\255\047\255\000\000\063\255\047\255\
\069\255\047\255\000\000\047\255\000\000\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\156\000\083\001\046\001\153\000\
\133\000\067\000\001\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\171\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\090\001\
\068\001\189\000\207\000\225\000\243\000\089\000\111\000\005\001\
\024\001\023\000\045\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000"

let yygindex = "\000\000\
\249\255\000\000\050\000\051\000\245\255\000\000\235\255\002\000\
\241\255"

let yytablesize = 626
let yytable = "\027\000\
\025\000\024\000\025\000\042\000\030\000\003\000\004\000\005\000\
\006\000\003\000\004\000\005\000\006\000\054\000\055\000\031\000\
\032\000\033\000\050\000\051\000\052\000\053\000\023\000\039\000\
\040\000\056\000\057\000\010\000\001\000\011\000\026\000\010\000\
\021\000\041\000\022\000\060\000\023\000\062\000\063\000\028\000\
\058\000\059\000\042\000\042\000\024\000\029\000\034\000\003\000\
\004\000\005\000\006\000\007\000\043\000\065\000\044\000\008\000\
\067\000\009\000\069\000\045\000\070\000\003\000\004\000\005\000\
\006\000\047\000\022\000\035\000\036\000\010\000\046\000\011\000\
\061\000\026\000\064\000\066\000\068\000\048\000\000\000\049\000\
\037\000\038\000\000\000\010\000\000\000\011\000\000\000\000\000\
\020\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\021\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\019\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\014\000\000\000\000\000\005\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\018\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\012\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\013\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\011\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\016\000\000\000\000\000\025\000\
\025\000\000\000\000\000\000\000\025\000\025\000\025\000\025\000\
\025\000\025\000\025\000\025\000\025\000\025\000\025\000\015\000\
\025\000\000\000\025\000\025\000\025\000\023\000\023\000\000\000\
\000\000\000\000\023\000\023\000\023\000\023\000\023\000\023\000\
\023\000\023\000\023\000\023\000\023\000\009\000\023\000\000\000\
\023\000\023\000\023\000\024\000\024\000\000\000\000\000\000\000\
\024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
\024\000\024\000\024\000\008\000\024\000\000\000\024\000\024\000\
\024\000\022\000\022\000\000\000\000\000\000\000\022\000\022\000\
\022\000\022\000\007\000\000\000\022\000\022\000\022\000\022\000\
\022\000\006\000\022\000\000\000\022\000\022\000\022\000\020\000\
\020\000\000\000\000\000\000\000\020\000\020\000\020\000\020\000\
\000\000\000\000\020\000\020\000\020\000\020\000\020\000\000\000\
\020\000\000\000\020\000\020\000\020\000\021\000\021\000\000\000\
\000\000\000\000\021\000\021\000\021\000\021\000\000\000\000\000\
\021\000\021\000\021\000\021\000\021\000\000\000\021\000\000\000\
\021\000\021\000\021\000\019\000\019\000\000\000\000\000\000\000\
\019\000\019\000\000\000\000\000\000\000\000\000\019\000\019\000\
\019\000\019\000\019\000\000\000\019\000\000\000\019\000\014\000\
\014\000\000\000\000\000\005\000\014\000\014\000\000\000\005\000\
\005\000\000\000\014\000\014\000\014\000\014\000\014\000\000\000\
\014\000\018\000\018\000\005\000\000\000\000\000\018\000\018\000\
\000\000\000\000\000\000\000\000\018\000\018\000\018\000\018\000\
\018\000\000\000\018\000\010\000\010\000\000\000\000\000\000\000\
\010\000\010\000\000\000\000\000\000\000\000\000\010\000\010\000\
\010\000\010\000\010\000\000\000\010\000\012\000\012\000\000\000\
\000\000\000\000\012\000\012\000\000\000\000\000\000\000\000\000\
\012\000\012\000\012\000\012\000\012\000\000\000\012\000\013\000\
\013\000\000\000\000\000\000\000\013\000\013\000\000\000\000\000\
\000\000\000\000\013\000\013\000\013\000\013\000\013\000\000\000\
\013\000\011\000\011\000\000\000\000\000\000\000\011\000\011\000\
\000\000\000\000\000\000\000\000\011\000\011\000\011\000\011\000\
\011\000\000\000\011\000\016\000\016\000\000\000\000\000\000\000\
\016\000\016\000\000\000\000\000\000\000\000\000\016\000\016\000\
\016\000\016\000\016\000\000\000\016\000\000\000\015\000\015\000\
\000\000\000\000\000\000\015\000\015\000\000\000\000\000\000\000\
\000\000\015\000\015\000\015\000\015\000\015\000\000\000\015\000\
\000\000\000\000\000\000\000\000\000\000\009\000\000\000\000\000\
\000\000\009\000\009\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\009\000\009\000\000\000\009\000\000\000\000\000\
\000\000\000\000\000\000\008\000\000\000\000\000\000\000\008\000\
\008\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\008\000\008\000\007\000\008\000\000\000\000\000\007\000\007\000\
\000\000\006\000\000\000\000\000\000\000\006\000\006\000\000\000\
\007\000\000\000\007\000\000\000\000\000\000\000\000\000\006\000\
\000\000\006\000"

let yycheck = "\011\000\
\000\000\009\000\010\000\019\000\007\001\001\001\002\001\003\001\
\004\001\001\001\002\001\003\001\004\001\035\000\036\000\018\001\
\019\001\020\001\030\000\031\000\032\000\033\000\000\000\016\001\
\017\001\037\000\038\000\023\001\001\000\025\001\026\001\023\001\
\004\001\025\001\006\001\043\000\004\001\045\000\046\000\022\001\
\039\000\040\000\058\000\059\000\000\000\021\001\026\001\001\001\
\002\001\003\001\004\001\005\001\007\001\061\000\004\001\009\001\
\064\000\011\001\066\000\010\001\068\000\001\001\002\001\003\001\
\004\001\024\001\000\000\014\001\015\001\023\001\012\001\025\001\
\007\001\026\001\008\001\013\001\008\001\028\000\255\255\029\000\
\027\001\028\001\255\255\023\001\255\255\025\001\255\255\255\255\
\000\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\000\000\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\000\000\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\000\000\255\255\255\255\000\000\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\000\000\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\000\000\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\000\000\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\000\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\000\000\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\000\000\255\255\255\255\007\001\
\008\001\255\255\255\255\255\255\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\019\001\020\001\021\001\022\001\000\000\
\024\001\255\255\026\001\027\001\028\001\007\001\008\001\255\255\
\255\255\255\255\012\001\013\001\014\001\015\001\016\001\017\001\
\018\001\019\001\020\001\021\001\022\001\000\000\024\001\255\255\
\026\001\027\001\028\001\007\001\008\001\255\255\255\255\255\255\
\012\001\013\001\014\001\015\001\016\001\017\001\018\001\019\001\
\020\001\021\001\022\001\000\000\024\001\255\255\026\001\027\001\
\028\001\007\001\008\001\255\255\255\255\255\255\012\001\013\001\
\014\001\015\001\000\000\255\255\018\001\019\001\020\001\021\001\
\022\001\000\000\024\001\255\255\026\001\027\001\028\001\007\001\
\008\001\255\255\255\255\255\255\012\001\013\001\014\001\015\001\
\255\255\255\255\018\001\019\001\020\001\021\001\022\001\255\255\
\024\001\255\255\026\001\027\001\028\001\007\001\008\001\255\255\
\255\255\255\255\012\001\013\001\014\001\015\001\255\255\255\255\
\018\001\019\001\020\001\021\001\022\001\255\255\024\001\255\255\
\026\001\027\001\028\001\007\001\008\001\255\255\255\255\255\255\
\012\001\013\001\255\255\255\255\255\255\255\255\018\001\019\001\
\020\001\021\001\022\001\255\255\024\001\255\255\026\001\007\001\
\008\001\255\255\255\255\008\001\012\001\013\001\255\255\012\001\
\013\001\255\255\018\001\019\001\020\001\021\001\022\001\255\255\
\024\001\007\001\008\001\024\001\255\255\255\255\012\001\013\001\
\255\255\255\255\255\255\255\255\018\001\019\001\020\001\021\001\
\022\001\255\255\024\001\007\001\008\001\255\255\255\255\255\255\
\012\001\013\001\255\255\255\255\255\255\255\255\018\001\019\001\
\020\001\021\001\022\001\255\255\024\001\007\001\008\001\255\255\
\255\255\255\255\012\001\013\001\255\255\255\255\255\255\255\255\
\018\001\019\001\020\001\021\001\022\001\255\255\024\001\007\001\
\008\001\255\255\255\255\255\255\012\001\013\001\255\255\255\255\
\255\255\255\255\018\001\019\001\020\001\021\001\022\001\255\255\
\024\001\007\001\008\001\255\255\255\255\255\255\012\001\013\001\
\255\255\255\255\255\255\255\255\018\001\019\001\020\001\021\001\
\022\001\255\255\024\001\007\001\008\001\255\255\255\255\255\255\
\012\001\013\001\255\255\255\255\255\255\255\255\018\001\019\001\
\020\001\021\001\022\001\255\255\024\001\255\255\007\001\008\001\
\255\255\255\255\255\255\012\001\013\001\255\255\255\255\255\255\
\255\255\018\001\019\001\020\001\021\001\022\001\255\255\024\001\
\255\255\255\255\255\255\255\255\255\255\008\001\255\255\255\255\
\255\255\012\001\013\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\021\001\022\001\255\255\024\001\255\255\255\255\
\255\255\255\255\255\255\008\001\255\255\255\255\255\255\012\001\
\013\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\021\001\022\001\008\001\024\001\255\255\255\255\012\001\013\001\
\255\255\008\001\255\255\255\255\255\255\012\001\013\001\255\255\
\022\001\255\255\024\001\255\255\255\255\255\255\255\255\022\001\
\255\255\024\001"

let yynames_const = "\
  EOF\000\
  True\000\
  False\000\
  LET\000\
  REC\000\
  EQ\000\
  IN\000\
  FUN\000\
  ARROW\000\
  IF\000\
  THEN\000\
  ELSE\000\
  PLUS\000\
  MINUS\000\
  MUL\000\
  DIV\000\
  LT\000\
  LE\000\
  NE\000\
  AND\000\
  OR\000\
  LPAREN\000\
  RPAREN\000\
  LBRAC\000\
  RBRAC\000\
  SEMI\000\
  COLONCOLON\000\
  "

let yynames_block = "\
  Num\000\
  Id\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Nano.expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Nano.expr) in
    Obj.repr(
# 56 "nanoParse.mly"
                                ( Let(_2,_4,_6) )
# 337 "nanoParse.ml"
               : Nano.expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : Nano.expr) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : Nano.expr) in
    Obj.repr(
# 57 "nanoParse.mly"
                                ( Letrec(_3,_5,_7) )
# 346 "nanoParse.ml"
               : Nano.expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Nano.expr) in
    Obj.repr(
# 58 "nanoParse.mly"
                                ( Fun(_2,_4) )
# 354 "nanoParse.ml"
               : Nano.expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Nano.expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Nano.expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Nano.expr) in
    Obj.repr(
# 59 "nanoParse.mly"
                                ( If(_2,_4,_6) )
# 363 "nanoParse.ml"
               : Nano.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'exp2) in
    Obj.repr(
# 60 "nanoParse.mly"
                                ( _1 )
# 370 "nanoParse.ml"
               : Nano.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp2) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp3) in
    Obj.repr(
# 63 "nanoParse.mly"
                                ( Bin(_1,Or,_3) )
# 378 "nanoParse.ml"
               : 'exp2))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'exp3) in
    Obj.repr(
# 64 "nanoParse.mly"
                                ( _1 )
# 385 "nanoParse.ml"
               : 'exp2))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp3) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp4) in
    Obj.repr(
# 67 "nanoParse.mly"
                                ( Bin(_1,And,_3) )
# 393 "nanoParse.ml"
               : 'exp3))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'exp4) in
    Obj.repr(
# 68 "nanoParse.mly"
                                ( _1 )
# 400 "nanoParse.ml"
               : 'exp3))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp4) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp9) in
    Obj.repr(
# 71 "nanoParse.mly"
                                ( Bin(_1,Eq,_3) )
# 408 "nanoParse.ml"
               : 'exp4))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp4) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp9) in
    Obj.repr(
# 72 "nanoParse.mly"
                                ( Bin(_1,Ne,_3) )
# 416 "nanoParse.ml"
               : 'exp4))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp4) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp9) in
    Obj.repr(
# 73 "nanoParse.mly"
                                ( Bin(_1,Lt,_3) )
# 424 "nanoParse.ml"
               : 'exp4))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp4) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp9) in
    Obj.repr(
# 74 "nanoParse.mly"
                                ( Bin(_1,Le,_3) )
# 432 "nanoParse.ml"
               : 'exp4))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'exp9) in
    Obj.repr(
# 75 "nanoParse.mly"
                                ( _1 )
# 439 "nanoParse.ml"
               : 'exp4))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp5) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp9) in
    Obj.repr(
# 78 "nanoParse.mly"
                                ( Bin(_1,Cons,_3) )
# 447 "nanoParse.ml"
               : 'exp9))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp5) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp9) in
    Obj.repr(
# 79 "nanoParse.mly"
                                ( Bin(_1,Cons,_3) )
# 455 "nanoParse.ml"
               : 'exp9))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'exp9) in
    Obj.repr(
# 80 "nanoParse.mly"
                                ( Bin(_1,Cons,NilExpr) )
# 462 "nanoParse.ml"
               : 'exp9))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'exp9) in
    Obj.repr(
# 81 "nanoParse.mly"
                                ( _2 )
# 469 "nanoParse.ml"
               : 'exp9))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'exp5) in
    Obj.repr(
# 82 "nanoParse.mly"
                                ( _1 )
# 476 "nanoParse.ml"
               : 'exp9))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp5) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp6) in
    Obj.repr(
# 85 "nanoParse.mly"
                                ( Bin(_1,Plus,_3) )
# 484 "nanoParse.ml"
               : 'exp5))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp5) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp6) in
    Obj.repr(
# 86 "nanoParse.mly"
                                ( Bin(_1,Minus,_3) )
# 492 "nanoParse.ml"
               : 'exp5))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'exp6) in
    Obj.repr(
# 87 "nanoParse.mly"
                                ( _1 )
# 499 "nanoParse.ml"
               : 'exp5))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp6) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp7) in
    Obj.repr(
# 90 "nanoParse.mly"
                                ( Bin(_1,Mul,_3))
# 507 "nanoParse.ml"
               : 'exp6))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp6) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp7) in
    Obj.repr(
# 91 "nanoParse.mly"
                                ( Bin(_1,Div,_3))
# 515 "nanoParse.ml"
               : 'exp6))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'exp7) in
    Obj.repr(
# 92 "nanoParse.mly"
                                ( _1 )
# 522 "nanoParse.ml"
               : 'exp6))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'exp7) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'exp8) in
    Obj.repr(
# 95 "nanoParse.mly"
                                ( App(_1,_2) )
# 530 "nanoParse.ml"
               : 'exp7))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'exp8) in
    Obj.repr(
# 96 "nanoParse.mly"
                                ( _1 )
# 537 "nanoParse.ml"
               : 'exp7))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 99 "nanoParse.mly"
                                ( Const(_1) )
# 544 "nanoParse.ml"
               : 'exp8))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 100 "nanoParse.mly"
                                ( Var(_1) )
# 551 "nanoParse.ml"
               : 'exp8))
; (fun __caml_parser_env ->
    Obj.repr(
# 101 "nanoParse.mly"
                                ( True )
# 557 "nanoParse.ml"
               : 'exp8))
; (fun __caml_parser_env ->
    Obj.repr(
# 102 "nanoParse.mly"
                                ( False )
# 563 "nanoParse.ml"
               : 'exp8))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Nano.expr) in
    Obj.repr(
# 103 "nanoParse.mly"
                                ( _2 )
# 570 "nanoParse.ml"
               : 'exp8))
; (fun __caml_parser_env ->
    Obj.repr(
# 104 "nanoParse.mly"
                                ( NilExpr )
# 576 "nanoParse.ml"
               : 'exp8))
(* Entry exp *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let exp (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Nano.expr)
